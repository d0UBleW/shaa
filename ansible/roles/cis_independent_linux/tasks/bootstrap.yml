---
- name: Bootstrap
  tags:
    - always
  block:
    - name: Gather the package facts
      ansible.builtin.package_facts:
        manager: auto
      when:
        - ansible_facts.packages is not defined

    - name: Get OS information
      ansible.builtin.shell: >
        grep -oP '^(NAME|VERSION_ID)=.*$' /etc/os-release |
        awk -F '=' '{print $2}' | tr -d '"'
      register: os_info
      changed_when: false

    - name: Set OS information fact
      vars:
        tmp_os_info_rg: >-
          {{ os_info.stdout_lines | map('regex_escape') | join('|') }}
      ansible.builtin.set_fact:
        os_info_rg: "{{ tmp_os_info_rg }}"
        sensitive_rg: >-
          ([\\%]v|[\\%]r|[\\%]m|[\\%]s|{{ tmp_os_info_rg }})

    - name: Check for OS family compatibility (skip if ok, fail if not)
      ansible.builtin.fail:
        msg: |
          The OS family ({{ ansible_os_family }}) is currently not supported
          yet.
      when:
        - ansible_os_family not in supported_os_families

    - name: Include OS family specific variables
      ansible.builtin.include_vars:
        file: "{{ ansible_os_family }}.yml"

    - name: Ensure necessary packages are installed
      ansible.builtin.package:
        name: "{{ pkg }}"
        state: present
      loop: "{{ bootstrap_pkgs }}"
      loop_control:
        loop_var: pkg

    - name: Ensure pexpect python3 library is installed
      ansible.builtin.pip:
        name: pexpect

    - name: Get UID_MIN value from login.defs
      ansible.builtin.shell: >-
        grep -P '^UID_MIN' {{ login_defs }} | awk '{print $2}'
      register: uid_min_out
      changed_when: false

    - name: Set UID_MIN fact
      ansible.builtin.set_fact:
        uid_min: "{{ uid_min_out.stdout.strip() }}"

    - name: Check for BIOS vs UEFI boot option
      ansible.builtin.shell: >
        [ -d /sys/firmware/efi ] && echo -n UEFI || echo -n BIOS
      register: boot_opt
      failed_when: false
      changed_when: false

    # grub2 on RedHat and Suse
    # grub on Debian
    # grub-install -V or grub2-install -V to get the grub version
    # grub 0.97 config file is /boot/grub/menu.lst
    - name: Check if the boot loader is GRUB version 2
      vars:
        match: >
          {{ ansible_facts.packages | dict2items |
             selectattr('key', 'match', '^grub2') | length }}
      ansible.builtin.set_fact:
        grub_v2: "{{ match | int > 0 }}"

    - name: Set boot option fact
      ansible.builtin.set_fact:
        boot_option: "{{ boot_opt.stdout }}"

    - name: Set BIOS boot loader config file fact
      when:
        - boot_option == 'BIOS'
      ansible.builtin.set_fact:
        boot_loader_conf: "/boot/{{ grub_prefix }}/grub.cfg"

    - name: GRUB2 UEFI
      when:
        - grub_v2
        - boot_option == 'UEFI'
      block:
        - name: Resolve EFI boot loader config file symlink
          ansible.builtin.stat:
            path: /etc/grub2-efi.cfg
          register: grub2_efi_symlink

        - name: Set EFI boot loader config file fact
          ansible.builtin.set_fact:
            boot_loader_conf: "{{ grub2_efi_symlink.stat.lnk_source }}"

    - name: Check if systemd exists
      vars:
        match: >
          {{ ansible_facts.packages | dict2items |
             selectattr('key', 'match', '^systemd') | length }}
      ansible.builtin.set_fact:
        has_systemd: "{{ match | int > 0 }}"

    - name: Check if update-rc.d exists
      vars:
        match: >
          {{ ansible_facts.packages | dict2items |
             selectattr('key', 'match', 'init-system-helpers') | length }}
      ansible.builtin.set_fact:
        has_update_rc_d: "{{ match | int > 0 }}"
