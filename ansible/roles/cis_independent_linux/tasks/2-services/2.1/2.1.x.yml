---
- name: 2.1.x
  tags:
    - level_1_server
    - level_1_workstation
  block:
    - name: |
        ---
        {{ svc.desc }}
        > Get config file(s) with {{ svc.name.xinetd }} service (xinetd)
        ---
      ansible.builtin.shell: >
        grep -lRP '^service\s+{{ svc.name.xinetd }}\b'
        /etc/xinetd.d/* /etc/xinetd.conf
      register: matched_file
      changed_when: false
      failed_when: false

    - name: |
        ---
        {{ svc.desc }}
        > Set `disable = yes` where necessary (xinetd)
        ---
      when:
        - matched_file.rc != 2
      vars:
        part_1_rg: '^service\s+{{ svc.name.xinetd }}(?:{|\b[.\s]*?{)[^}]*?'
      ansible.builtin.replace:
        path: "{{ file }}"
        regexp: >-
          ({{ part_1_rg }})disable\s*=\s*no(\b)
        replace: '\1disable = yes\2'
      loop: "{{ matched_file.stdout_lines }}"
      loop_control:
        label: "{{ file }}"
        loop_var: file

    - name: |
        ---
        {{ svc.desc }}
        > Get config file(s) with {{ svc.name.inetd }} service (inetd)
        ---
      ansible.builtin.shell: >
        grep -lRP '^{{ svc.name.inetd }}\b'
        /etc/inetd.d/* /etc/inetd.conf
      register: matched_file
      changed_when: false
      failed_when: false

    - name: |
        ---
        {{ svc.desc }}
        > Comment out any lines starting with {{ svc.name.inetd }} (inetd)
        ---
      when:
        - matched_file.rc != 2
      ansible.builtin.replace:
        path: "{{ file }}"
        regexp: '^({{ svc.name.inetd }}\b.+)'
        replace: '# \1'
      loop: "{{ matched_file.stdout_lines }}"
      loop_control:
        label: "{{ file }}"
        loop_var: file

  rescue:
    - name: Flushing all handlers
      ansible.builtin.meta: flush_handlers

    - name: Error backtrace
      vars:
        section_id: "{{ svc.section_id }}"
      ansible.builtin.import_tasks:
        file: error_logging.yml
